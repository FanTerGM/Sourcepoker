// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define NLOHMANN_JSON_SERIALIZE_ENUM(ENUM_TYPE, __VA_ARGS__) template<typename BasicJsonType> inline void to_json(BasicJsonType& j, const ENUM_TYPE& e) { static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE " must be an enum!"); static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__; auto it = std::find_if(std::begin(m), std::end(m), [e](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool { return ej_pair.first == e; }); j = ((it != std::end(m)) ? it : std::begin(m))->second; } template<typename BasicJsonType> inline void from_json(const BasicJsonType& j, ENUM_TYPE& e) { static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE " must be an enum!"); static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__; auto it = std::find_if(std::begin(m), std::end(m), [&j](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool { return ej_pair.second == j; }); e = ((it != std::end(m)) ? it : std::begin(m))->first; }
#define NLOHMANN_JSON_NAMESPACE_BEGIN namespace nlohmann { inline namespace NLOHMANN_JSON_NAMESPACE_CONCAT( NLOHMANN_JSON_ABI_TAGS, NLOHMANN_JSON_NAMESPACE_VERSION) {
#define JSON_HEDLEY_RETURNS_NON_NULL __attribute__((__returns_nonnull__))
#define JSON_HEDLEY_RETURNS_NON_NULL
#define JSON_HEDLEY_CONST __attribute__((__const__))
#define JSON_HEDLEY_CONST _Pragma("no_side_effect")
#define JSON_HEDLEY_CONST
#define JSON_HEDLEY_PURE __attribute__((__pure__))
#define JSON_HEDLEY_PURE _Pragma("does_not_write_global_data")
#define JSON_HEDLEY_PURE _Pragma("FUNC_IS_PURE;")
#define JSON_HEDLEY_PURE
#define JSON_HEDLEY_NON_NULL(__VA_ARGS__) __attribute__((__nonnull__(__VA_ARGS__)))
#define JSON_HEDLEY_NON_NULL(__VA_ARGS__)
